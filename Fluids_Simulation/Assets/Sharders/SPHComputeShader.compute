#pragma kernel Integrate //Responsible for moving the spheres
#pragma kernel SetForces //Forces for the spheres
#pragma kernel SetDensityAndPressure //Density/pressure for the spheres

struct Sphere
{
    float pressure;
    float density;
    float3 force;
    float3 velocity;
    float3 position;
};

RWStructuredBuffer<Sphere> _spheres;

float sphereMass;
float viscosity;
float gasConstant;
float restDensity;
float boundDamping;
float radius;
float radiusPower2;
float radiusPower3;
float radiusPower4;
float radiusPower5;
float pi;
int sphereLength;
float timestep;
float3 cubeSize;

[numthreads(100,1,1)]
void Integrate (uint3 id: SV_DISPATCHTHREADID)
{
    // Update velocity
    float3 vel = _spheres[id.x].velocity + ((_spheres[id.x].force / sphereMass) * timestep);

    // Update position
    _spheres[id.x].position += vel * timestep;

    // Define boundaries
    float3 topRight = cubeSize / 2;
    float3 bottomLeft = -cubeSize / 2;

    // Minimum Enforcements
    _spheres[id.x].position.x = max(_spheres[id.x].position.x, bottomLeft.x + radius);
    _spheres[id.x].position.y = max(_spheres[id.x].position.y, bottomLeft.y + radius);
    _spheres[id.x].position.z = max(_spheres[id.x].position.z, bottomLeft.z + radius);

    // Maximum Enforcements
    _spheres[id.x].position.x = min(_spheres[id.x].position.x, topRight.x - radius);
    _spheres[id.x].position.y = min(_spheres[id.x].position.y, topRight.y - radius);
    _spheres[id.x].position.z = min(_spheres[id.x].position.z, topRight.z - radius);

    // Dampening
    if (_spheres[id.x].position.x == bottomLeft.x + radius || _spheres[id.x].position.x == topRight.x - radius)
        vel.x *= boundDamping;
    if (_spheres[id.x].position.y == bottomLeft.y + radius || _spheres[id.x].position.y == topRight.y - radius)
        vel.y *= boundDamping;
    if (_spheres[id.x].position.z == bottomLeft.z + radius || _spheres[id.x].position.z == topRight.z - radius)
        vel.z *= boundDamping;

    _spheres[id.x].velocity = vel;
}


float StfKernel (float distanceSquared)
{
    float x = 1.0f - distanceSquared / radiusPower2;
    return 315.f / (64.f * pi * radiusPower3) * x * x * x;
}

[numthreads(100,1,1)]
void SetDensityAndPressure (uint3 id: SV_DISPATCHTHREADID)
{
    
   float3 origin = _spheres[id.x].position;
   float sum = 0;
   
   for (int i = 0; i < sphereLength; i++) {

        float3 diff = origin - _spheres[i].position;
        float distanceSquared = dot(diff, diff);
        
        if (radiusPower2*0.003 > distanceSquared*0.003) {
            sum += StfKernel(distanceSquared * 0.003); 
        } 
   }
   
   _spheres[id.x].density = sum * sphereMass + 0.000001f;
   _spheres[id.x].pressure = gasConstant * (_spheres[id.x].density - restDensity);
}

// Doyub Kim page 130
float SpikyKernelFirstDerivative(float distance)
{
    float x = 1.0f - distance / radius;
    return -45.f / ( pi * radiusPower4 ) * x * x;
}

// Doyub Kim page 130
float SpikyKernelSecondDerivative(float distance)
{
    float x = 1.0f - distance / radius;
    return 90.f / ( pi * radiusPower5 ) * x;
}


float3 SpikyKernelGradient(float distance, float3 direction)
{
    return SpikyKernelFirstDerivative(distance) * direction;
}

[numthreads(100,1,1)]
void SetForces (uint3 id: SV_DISPATCHTHREADID)
{
    float3 origin = _spheres[id.x].position;
    float density2 = _spheres[id.x].density * _spheres[id.x].density; 
    float mass2 = sphereMass * sphereMass;
    float3 pressure = float3(0,0,0);
    float3 visc = float3(0,0,0);

    for (int i = 0; i < sphereLength; i++) {
        
        if (origin.x == _spheres[i].position.x && origin.y == _spheres[i].position.y && origin.z == _spheres[i].position.z) {
            continue;
        }

        float dist = distance(_spheres[i].position, origin);
        if (dist < radius*2) {
            float3 pressureGradientDirection = normalize(_spheres[id.x].position - _spheres[i].position);
            
            float3 _pressureContribution = mass2 * SpikyKernelGradient(dist, pressureGradientDirection);
            _pressureContribution *= (_spheres[id.x].pressure / density2 + _spheres[i].pressure / (_spheres[i].density * _spheres[i].density));
            
            float3 _viscosityContribution = viscosity * mass2 * (_spheres[i].velocity - _spheres[id.x].velocity) / _spheres[i].density;
            _viscosityContribution *= SpikyKernelSecondDerivative(dist);

            pressure += _pressureContribution;
            visc += _viscosityContribution;
        }
    }

    _spheres[id.x].force = float3(0,(-9.81 * sphereMass), 0) - pressure + visc;
}

